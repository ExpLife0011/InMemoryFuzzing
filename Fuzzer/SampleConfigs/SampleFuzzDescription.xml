<Fuzz>

	<!-- Currently only option files can be included.
	     Option files can contain variables that replaye {[var]} constructs.
	     The path to the include file can be an absolute path or a relative path 
	     in respect to the path of this configuration file
	  -->
	<Include>config_paths.xml</Include>

	<!-- Defines settings for the remote control program,
	     if not specified the remote control program is not used
 	  -->
	<RemoteControl>
		<!-- Specifies the host to connect to -->
		<Host>localhost</Host>
		
		<!-- Specifies the port to connect at -->
		<Port>8899</Port>
		
		<!-- Tells the remote control protocol to execute a remote program.
		     The time of execution is specified by the "trigger" argument
		     
		     trigger accepts the following values:
		     	immediate   ... execute program once on fuzzer launch
		     	onfuzzstart ... execute program on every fuzz run
		     	onfuzzstop  ... execute programm after each fuzz run
		     	
		     	
		     Cmd, Arg, Env can contain variables. Variables are always encapsulated in "{[...]}".
		     
		     Current valid variables are:		     
		     remote-pid|<name> ... Retrieves the process id of the process identified by <name> from the remote system
		                           If multiple processes are matching <name> the first match is taken
		  -->
		<Exec trigger="immediate">			
			<Cmd>{[hacklet_path]}/prog0-x64</Cmd>
			<!--<Env>LD_PRELOAD=/home/andi/Documents/Uni/master-thesis/src/log_memory_allocations/liblog_memory_allocations.so</Env>
			<Env>LOG_MEM_PIPE=log_mem</Env>-->
		</Exec>
		<Exec trigger="immediate">
		
			<!-- Defines the command to execute -->
			<Cmd>{[gdbserver_exec]}</Cmd>				

			<Arg>:1234</Arg>
			<Arg>{[hacklet_path]}/prog0-x64</Arg>	
		</Exec>
	</RemoteControl>
	
	<!-- Defines settings for connecting to the target stub. This has nothing to do with the RemoteControl,
	     the remote control is only a helper for managing the remote stub. The remote stub e.g. is a gdb server 
	     running on the target platform.
	  -->
	<TargetConnection>
		<!-- Specifies the connector to use. This can be a short and readable class identifier attribute name like "general/gdb",
			 but can also be a fully qualified classname (also from external assemblies)
		  -->
		<Connector>general/gdb</Connector>
		
		<Config key="gdb_exec">{[gdb_exec]}</Config>
		<!-- Define some connector specific configuration values. This values are passed to the connector
		     using the "Setup" method
		  -->
		<Config key="gdb_log">stream:stderr</Config>
		<Config key="target">extended-remote localhost:1234</Config>
		
		<!--
		<Config key="target">run-local</Config>
		-->
		
		<!--
		<Config key="target">attach_local</Config>
		<Config key="target-options">12345</Config>
		-->
		
		<Config key="file">{[hacklet_path]}/prog0-x64</Config>
	</TargetConnection>
	
	<!-- Describes a single fuzz process, can contain multiple memory locations to fuzz
	  -->
	<FuzzDescription>
		<!-- Describes a location (memory location or method which can be resolved using the debugging symbols, for different
		     location specifiers see below) where the fuzzer hooks in and changes the specified memory locations or variables
		     
		     Valid region specifiers are:
		     	method|<method_name> ... Resolves to the start (after the prolog) of the specified function
		     	methodret|<method_name> ... Resolves to the "end" of the specified method. A break is set to the instruction right after the method call
		     	address|0x12345678   ... Resolves to the specified address
		     	source|<filename>,<linenum> ... Resolves to the first instruction of the specified source code line.
		     	                                This specifier is only availabe if debugging symbols and source code
		     	                                is available, and the symbol table implementation supports it.
		  -->
		<RegionStart>source|prog0.c,27</RegionStart>
		
		<!-- Describes a location were the Fuzzer stops and restores the state as it was at RegionStart.
		     For different location specifiers see FuzzStart
		  -->
		<RegionEnd>address|0x400792</RegionEnd>
		
		
		<!-- Defines a single location (variable or memory location) to fuzz, and its data generator.
		     Multiple FuzzLocation tags can be specified
		  -->
		<FuzzLocation>
		    <!-- Specifies the data region to fuzz, syntax:
		    	 <specifier>:<identifier>
		    	 
		    	 The size of the specified region is specified using the data generator settings
		    	 
		    	 specifier can be one of the following values:		    	 
		    	 variable: identifier=>name of a variable valid in the context of the specified method. 
		    	                       Can only be used if debugging symbols are available
		    	 address: identifier=>0x<address> hex address of the memory region to fuzz
		    	 calc: identifier=>any valid math expression
		    	 
		    	 a math expression can be 1234+6789, 
		    	   {[0xDEADBEEF]}+1234 to specify hex values, or
		    	   {[reg:rbp]}+24 (or any other valid register on the target machine) to reference to registers
		      -->
			<DataRegion>variable|myArg</DataRegion>
			
			<!-- Tells the fuzzer how to fuzz the specified data region.
			     Currently valid values are: 
			     		
			         'fuzzerdescription/pointer_value': 
			            On each fuzzer run, a new data region is allocated and the specified 
			            data region points to the new data (e.g. for common char* data)
			         
			         'fuzzerdescription/single_value'
			            The fuzzer directly fuzzes the specified data region. Be careful to specify
			            the correct size of the data region using the data generator, or other data
			            on the stack may get overwritten
			  -->
			<DataType>fuzzdescription/pointer_value</DataType>
			<!-- Specifies the data generator to use.
				 Currently valid datagenerators are:
				 	'datagen/random_bytes' 
				 	'datagen/replay'
				 	
				 For valid and required arguments refer to the corresponding 
				 datagenerator-documentation
			  -->				
			<DataGenerator>datagen/random_bytes</DataGenerator>
			
			<!-- RandomByteGeneraator specific settings
			  -->
			  
			<!-- Minimum length of generated data -->
			<DataGenArg name="minlen">1</DataGenArg>
			
			<!-- Maximum length of generated data -->
			<DataGenArg name="maxlen">10000</DataGenArg>
			
			<!--
			     Type of generated data
			     			
			/// All bytes are allowed
			All,
			
			/// Only printable ascii chars 
			PrintableASCII,
			
			/// Combination of PrintableASCII and AllNullTerminated
			PrintableASCIINullTerminated,
			
			/// All characters are valid, except the null char, it only appears as the last character
			AllNullTerminated
			  -->
			<DataGenArg name="type">PrintableASCIINullTerminated</DataGenArg>
		</FuzzLocation>
		
	</FuzzDescription>
	
	<!-- Specifies the loggers to use -->
	<Logger>
		<!-- Specifies the log destination (usually a local path) to use
		     Use {[DATETIME]} to include the current date and time (in fixed format) 
		     in the log path
		  --> 
		<Destination>{[log_path]}</Destination>
		
		<!-- Logs all generated data 
		  -->
		<UseLogger name="datagenlogger" />
		
		<!-- Logs all relevant data generated by the connector.
		     E.g. for the gdb connector, the logger write a replay log after each fuzzer run
		  -->
		<UseLogger name="connectorlogger" />
		
		<!-- Retrieves stack frame info on each fuzzer run and writes it to destination
		  -->
		<UseLogger name="stackframelogger" />
		
		<!-- Uses the remote control protocol to listen to the specified pipe names and
		     dumps all received data to the specified path
		  -->
		<!--<UseLogger name="remotepipelogger">
			<PipeName>log_mem</PipeName>
		</UseLogger>-->
	</Logger>
	
</Fuzz>
